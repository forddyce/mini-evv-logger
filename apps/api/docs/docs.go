// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Fordyce Gozali",
            "email": "forddyce92@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/schedules": {
            "get": {
                "description": "Get a list of all schedules with their associated tasks.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all schedules",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved schedules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Schedule"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/reset": {
            "post": {
                "description": "Resets the status of sample schedules and tasks for demonstration purposes.",
                "produces": [
                    "application/json"
                ],
                "summary": "Reset sample data",
                "responses": {
                    "200": {
                        "description": "Sample data reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/stats": {
            "get": {
                "description": "Get aggregated statistics for all schedules (Total, Missed, Upcoming, Completed).",
                "produces": [
                    "application/json"
                ],
                "summary": "Get schedule statistics",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved schedule statistics",
                        "schema": {
                            "$ref": "#/definitions/models.ScheduleStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/today": {
            "get": {
                "description": "Get a list of all schedules (for demo purposes, returns all schedules).",
                "produces": [
                    "application/json"
                ],
                "summary": "Get today's schedules",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved today's schedules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Schedule"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/{id}": {
            "get": {
                "description": "Get a single schedule by its ID, including its tasks.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get schedule by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved schedule",
                        "schema": {
                            "$ref": "#/definitions/models.Schedule"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/{id}/end": {
            "post": {
                "description": "Log the end time and location for a schedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "End a visit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "End visit details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.EndVisitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Visit ended successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., visit not in progress)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/schedules/{id}/start": {
            "post": {
                "description": "Log the start time and location for a schedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Start a visit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Start visit details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.StartVisitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Visit started successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., visit already in progress)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskId}/update": {
            "post": {
                "description": "Update the completion status of a specific task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update task status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateTaskStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task status updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.EndVisitRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "handler.StartVisitRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "handler.UpdateTaskStatusRequest": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "reason": {
                    "description": "Optional reason",
                    "type": "string"
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "models.Schedule": {
            "type": "object",
            "properties": {
                "client_avatar": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_name": {
                    "type": "string"
                },
                "end_location": {
                    "$ref": "#/definitions/models.Location"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.Location"
                },
                "service_name": {
                    "type": "string"
                },
                "service_notes": {
                    "type": "string"
                },
                "shift_date": {
                    "type": "string"
                },
                "start_location": {
                    "$ref": "#/definitions/models.Location"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Task"
                    }
                },
                "visit_end": {
                    "type": "string"
                },
                "visit_start": {
                    "type": "string"
                }
            }
        },
        "models.ScheduleStats": {
            "type": "object",
            "properties": {
                "completedToday": {
                    "type": "integer"
                },
                "missedSchedules": {
                    "type": "integer"
                },
                "totalSchedules": {
                    "type": "integer"
                },
                "upcomingToday": {
                    "type": "integer"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "example.com",
	BasePath:         "/api",
	Schemes:          []string{"http", "https"},
	Title:            "EVV Logger API",
	Description:      "This is the API for the EVV Logger application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
